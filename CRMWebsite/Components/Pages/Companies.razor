@page "/companies"
@using CRMWebsite.Services
@inject NavigationManager NavigationManager
@inject CompaniesHouseService CompaniesService

<div class="companies-container">
    <div class="search-header">
        <h3>Find Companies for Work Experience</h3>
        <p class="subtitle">Search UK registered companies by name or location</p>
    </div>

    <div class="search-box-container">
        <div class="search-box">
            <div class="input-group">
                <label for="searchTerm">Company/Industry</label>
                <input @bind="searchTerm" id="searchTerm" placeholder="e.g. Tech, Construction" class="search-input" />
            </div>
            <div class="input-group">
                <label for="locationFilter">Location</label>
                <input @bind="locationFilter" id="locationFilter" placeholder="e.g. London, Leeds" class="search-input" />
            </div>
            <button @onclick="Search" class="search-button">
                <span class="search-icon">🔍</span> Search
            </button>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <p>Searching companies...</p>
        </div>
    }
    else if (paginatedCompanies?.Count > 0)
    {
        <div class="results-summary">
            <p>Showing @((currentPage - 1) * pageSize + 1)-@Math.Min(currentPage * pageSize, totalCompanies) of @totalCompanies companies</p>
        </div>

        <div class="company-list">
            @foreach (var company in paginatedCompanies)
            {
                <div class="company-card">
                    <div class="company-header">
                        <h4>@company.Title</h4>
                        <span class="company-status @company.CompanyStatus?.ToLower()">@company.CompanyStatus</span>
                    </div>

                    <div class="company-details">
                        <div class="detail-row">
                            <span class="detail-label">Company <br> Number:</span>
                            <span style="color:black"> <br> @company.CompanyNumber</span>
                        </div>
                        <div class="detail-row">
                            <span class="detail-label">Address:</span>
                            <span style="color:black">@company.AddressSnippet</span>
                        </div>
                        @if (company.DateOfCreation.HasValue)
                        {
                            <div class="detail-row">
                                <span class="detail-label">Founded:</span>
                                <span style="color:black">@company.DateOfCreation.Value.ToString("yyyy")</span>
                            </div>
                        }
                    </div>

                    <button @onclick="() => { if (company.CompanyNumber != null) ViewDetails(company.CompanyNumber); }" class="details-button">
                        View Full Details
                    </button>
                </div>
            }
        </div>

        @if (totalPages > 1)
        {
            <div class="pagination">
                @if (currentPage > 1)
                {
                    <button @onclick="() => ChangePage(1)" class="page-button">« First</button>
                    <button @onclick="() => ChangePage(currentPage - 1)" class="page-button">‹ Prev</button>
                }

                @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(totalPages, currentPage + 2); i++)
                {
                    <button @onclick="() => ChangePage(i)" disabled="true" class="page-button @(i == currentPage ? "active" : "")">@i</button>
                }

                @if (currentPage < totalPages)
                {
                    <button @onclick="() => ChangePage(currentPage + 1)" class="page-button">Next ›</button>
                    <button @onclick="() => ChangePage(totalPages)" class="page-button">Last »</button>
                }
            </div>
        }
    }
    else if ((!string.IsNullOrEmpty(searchTerm) || !string.IsNullOrEmpty(locationFilter)) && !isLoading)
    {
        <div class="no-results">
            <p>No companies found matching your search criteria.</p>
            <p>Try broadening your search or using different terms.</p>
        </div>
    }
</div>

@code {
    private string? searchTerm;
    private string? locationFilter;
    private CompanySearchResult? companies;
    private List<CompanyItem> filteredCompanies = new();
    private List<CompanyItem> paginatedCompanies = new();
    private bool isLoading;

    // Pagination variables
    private int currentPage = 1;
    private const int pageSize = 15;
    private int totalCompanies = 0;
    private int totalPages = 0;

    private async Task Search()
    {
        if (string.IsNullOrWhiteSpace(searchTerm) && string.IsNullOrWhiteSpace(locationFilter))
        {
            return;
        }

        isLoading = true;
        currentPage = 1; // Reset to first page on new search
        try
        {
            // If only location is provided, search for all companies in that location
            if (string.IsNullOrWhiteSpace(searchTerm) && !string.IsNullOrWhiteSpace(locationFilter))
            {
                // Search for companies with location in their name or address
                companies = await CompaniesService.SearchCompaniesAsync(locationFilter);
            }
            else
            {
                // Normal search with company name/industry
                companies = await CompaniesService.SearchCompaniesAsync(searchTerm!);
            }

            // Filter by location if specified
            filteredCompanies = companies?.Items?.ToList() ?? new List<CompanyItem>();

            if (!string.IsNullOrWhiteSpace(locationFilter))
            {
                filteredCompanies = filteredCompanies
                    .Where(c => c.AddressSnippet != null &&
                              c.AddressSnippet.Contains(locationFilter, StringComparison.OrdinalIgnoreCase))
                    .ToList();
            }

            totalCompanies = filteredCompanies.Count;
            totalPages = (int)Math.Ceiling((double)totalCompanies / pageSize);
            UpdatePaginatedCompanies();
        }
        finally
        {
            isLoading = false;
        }
    }

    private void UpdatePaginatedCompanies()
    {
        paginatedCompanies = filteredCompanies
            .Skip((currentPage - 1) * pageSize)
            .Take(pageSize)
            .ToList();
    }

    private void ChangePage(int page)
    {
        currentPage = page;
        UpdatePaginatedCompanies();
    }

    private void ViewDetails(string companyNumber)
    {
        NavigationManager.NavigateTo($"/company/{companyNumber}");
    }
}

<style>
    .companies-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    .search-header {
        text-align: center;
        margin-bottom: 30px;
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.08);
        padding: 20px;
        transition: transform 0.3s, box-shadow 0.3s;
    }

        .search-header h3 {
            color: #2c3e50;
            font-size: 28px;
            margin-bottom: 5px;
        }

    .subtitle {
        color: #7f8c8d;
        font-size: 16px;
    }

    .search-box-container {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 30px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .search-box {
        display: flex;
        flex-wrap: wrap;
        gap: 15px;
        align-items: flex-end;
    }

    .input-group {
        flex: 1;
        min-width: 250px;
    }

        .input-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
            color: #34495e;
        }

    .search-input {
        width: 100%;
        padding: 10px 15px;
        border: 1px solid #ddd;
        border-radius: 4px;
        font-size: 16px;
        transition: border-color 0.3s;
    }

        .search-input:focus {
            border-color: #3498db;
            outline: none;
            box-shadow: 0 0 0 2px rgba(52,152,219,0.2);
        }

    .search-button {
        background-color: #3498db;
        color: white;
        border: none;
        padding: 10px 20px;
        border-radius: 4px;
        font-size: 16px;
        cursor: pointer;
        display: flex;
        align-items: center;
        gap: 8px;
        transition: background-color 0.3s;
    }

        .search-button:hover {
            background-color: #2980b9;
        }

    .search-icon {
        font-size: 16px;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 40px;
    }

    .spinner {
        border: 4px solid rgba(0, 0, 0, 0.1);
        border-radius: 50%;
        border-top: 4px solid #3498db;
        width: 40px;
        height: 40px;
        animation: spin 1s linear infinite;
        margin-bottom: 15px;
    }

    .pagination {
        display: flex;
        justify-content: center;
        margin-top: 30px;
        gap: 5px;
        flex-wrap: wrap;
    }

    .page-button {
        padding: 8px 12px;
        border: 1px solid #ddd;
        background-color: white;
        color: #3498db;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.3s;
        min-width: 40px;
        text-align: center;
    }

        .page-button:hover {
            background-color: #f8f9fa;
        }

        .page-button.active {
            background-color: #3498db;
            color: white;
            border-color: #3498db;
        }

        .page-button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

    @@keyframes spin {
        0% {
            transform: rotate(0deg);
        }

        100% {
            transform: rotate(360deg);
        }
    }

    .results-summary {
        margin-bottom: 20px;
        color: #7f8c8d;
        font-size: 14px;
    }

    .company-list {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(350px, 1fr));
        gap: 20px;
    }

    .company-card {
        background: white;
        border-radius: 8px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.08);
        padding: 20px;
        transition: transform 0.3s, box-shadow 0.3s;
    }

        .company-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

    .company-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 15px;
        border-bottom: 1px solid #eee;
        padding-bottom: 10px;
    }

        .company-header h4 {
            margin: 0;
            color: #2c3e50;
            font-size: 18px;
            flex: 1;
        }

    .company-status {
        font-size: 12px;
        padding: 3px 8px;
        border-radius: 12px;
        font-weight: 600;
    }

        .company-status.active {
            background-color: #d4edda;
            color: #155724;
        }

        .company-status.dissolved {
            background-color: #f8d7da;
            color: #721c24;
        }

        .company-status.liquidation {
            background-color: #fff3cd;
            color: #856404;
        }

    .company-details {
        margin-bottom: 15px;
    }

    .detail-row {
        display: flex;
        margin-bottom: 8px;
        font-size: 14px;
    }

    .detail-label {
        font-weight: 600;
        color: #7f8c8d;
        min-width: 100px;
    }

    .details-button {
        width: 100%;
        background-color: #f8f9fa;
        color: #3498db;
        border: 1px solid #3498db;
        padding: 8px;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.3s;
    }

        .details-button:hover {
            background-color: #3498db;
            color: white;
        }

    .no-results {
        text-align: center;
        padding: 40px;
        background-color: #f8f9fa;
        border-radius: 8px;
        color: #7f8c8d;
    }

    @@media (max-width: 768px) {
        .search-box {
            flex-direction: column;
        }

        .input-group {
            width: 100%;
        }

        .search-button {
            width: 100%;
            justify-content: center;
        }

        .company-list {
            grid-template-columns: 1fr;
        }

        .pagination {
            gap: 3px;
        }

        .page-button {
            padding: 6px 8px;
            min-width: 30px;
        }
    }
</style>